【问题描述】设计一个CRectangle类，其中包括CPoint类的两个对象成员，表示左上角和右下角的两个点。要求求解矩形的面积。
注意，每个类的构造函数、拷贝构造函数需要输出“*** is called”,具体的请根据输出进行分析。
main函数已经给定如下：
int main()
{
    int a=1, b=1, c=6, d=11;
    cout<<"# Define p1 ######"<<endl;
    CPoint p1;
    cout<<"# Define p2 ######"<<endl;
    CPoint p2(10,20);
    cout<<"# Define rect1 ######"<<endl;
    CRectangle rect1;
    cout<<"# Define rect2 ######"<<endl;
    CRectangle rect2(p1, p2);
    cout<<"# Define rect3 ######"<<endl;
    CRectangle rect3(a, b, c, d);
    cout<<"# Define rect4 ######"<<endl;
    CRectangle rect4(rect2);
    cout<<"# Calculate area ######"<<endl;
    cout << "rect1面积为" << rect1.GetArea() << endl;
    cout << "rect2面积为" << rect2.GetArea() << endl;
    cout << "rect3面积为" << rect3.GetArea() << endl;
    cout << "rect4面积为" << rect4.GetArea() << endl;
    system("pause");
    return 0;
}

【样例输出】
# Define p1 ######
CPoint contstructor with default value(0,0) is called.
# Define p2 ######
CPoint contstructor with default value(0,0) is called.
# Define rect1 ######
CPoint contstructor with default value(0,0) is called.
CPoint contstructor with default value(0,0) is called.
CRectangle default contstructor is called.
# Define rect2 ######
CPoint copy contstructor is called.
CPoint copy contstructor is called.
CPoint copy contstructor is called.
CPoint copy contstructor is called.
CRectangle contstructor with (CPoint,CPoint) is called.
# Define rect3 ######
CPoint contstructor with default value(0,0) is called.
CPoint contstructor with default value(0,0) is called.
CRectangle contstructor with (int,int,int,int) is called.
# Define rect4 ######
CPoint copy contstructor is called.
CPoint copy contstructor is called.
CRectangle copy contstructor is called.
# Calculate area ######
rect1面积为0
rect2面积为200
rect3面积为50
rect4面积为200

【样例说明】
【评分标准】


#include  <iostream>
using  namespace  std; 
//填空部分开始
class CPoint
{

	public:
		CPoint(CPoint& m)
		{
			Nx1=m.Nx1;
			Ny1=m.Ny1;
			cout<<"CPoint copy contstructor is called."<<endl;
		}
			CPoint(int x1=0,int y1=0)
		{
			Nx1=x1;
			Ny1=y1;
			cout<<"CPoint contstructor with default value(0,0) is called."<<endl;
		}
		int getx1()
		{
			return Nx1; 
		}
		int gety1()
		{
			return Ny1;//getx1()和gety1()函数实现了另一个类对本类私有成员变量的值的调用功能
}
	private:
		int Nx1,Ny1;
};

class CRectangle
{
	
	public:
		CRectangle()
		{
			cout<<"CRectangle default contstructor is called."<<endl;
		}
		CRectangle(CRectangle& p);
		CRectangle(CPoint x1,CPoint x2);
		CRectangle(int x1,int y1,int x2,int y2);
		int GetArea()
			{return (p1.getx1()-p2.getx1())*(p1.gety1()-p2.gety1());}	
	private:
		CPoint p1,p2;
};

CRectangle::CRectangle(CRectangle& p):
		p1(p.p1),p2(p.p2)
		{
			
			cout<<"CRectangle copy contstructor is called."<<endl;
		}	
    
CRectangle::CRectangle(CPoint x1,CPoint x2):
		p1(x1),p2(x2)
		{cout<<"CRectangle contstructor with (CPoint,CPoint) is called."<<endl;}
    
CRectangle::CRectangle(int x1,int y1,int x2,int y2):
		p1(x1,y1),p2(x2,y2)
		{cout<<"CRectangle contstructor with (int,int,int,int) is called."<<endl;}

//				
int  main() 
{ 
        int a=1,b=1,c=6,d=11; 
        cout<<"#  Define  p1  ######"<<endl; 
        CPoint  p1; 
        cout<<"#  Define  p2  ######"<<endl; 
        CPoint  p2(10,20); 
        cout<<"#  Define  rect1  ######"<<endl; 
        CRectangle  rect1; 
        cout<<"#  Define  rect2  ######"<<endl; 
        CRectangle  rect2(p1,p2); 
        cout<<"#  Define  rect3  ######"<<endl; 
        CRectangle  rect3(a,b,c,d); 
        cout<<"#  Define  rect4  ######"<<endl; 
        CRectangle  rect4(rect2); 
        cout<<"#  Calculate  area  ######"<<endl; 
        cout  <<  "rect1面积为"  <<  rect1.GetArea()  <<  endl; 
        cout  <<  "rect2面积为"  <<  rect2.GetArea()  <<  endl; 
        cout  <<  "rect3面积为"  <<  rect3.GetArea()  <<  endl; 
        cout  <<  "rect4面积为"  <<  rect4.GetArea()  <<  endl; 
        system("pause"); 
        return  0; 
} 

