1.【问题描述】
 
八皇后问题是一个以国际象棋为背景的问题：如何能够在 8*8 的国际象棋棋盘上放置八个皇后，使得任何一个皇后都无法直接吃掉其他的皇后。为了达到此目的，任两个皇后都不能处于同一条横行、纵行或斜线上。例如下图就是八皇后问题的一个解： 
 
假如一棋盘已经正确放置了七个皇后，编写程序求解最后一个皇后的放置位置。
 
【输入形式】
 
按照棋盘行由小到大的顺序从控制台输入已正确放置的皇后的列数（列数从1开始计数），未放置皇后的行以字符“*”表示。各列数和字符“*”之间没有任何其它字符分隔，在输入末尾有回车换行符。例如：上图棋盘假如第4行没有放置皇后，其它七个皇后都已放置完毕，则输入的形式为：368*4752。
 
【输出形式】
 
在标准输出上输出最后一个皇后应该放置的列数（列数大于等于1，小于等于8，列数后的回车换行可有可无）。若无解，则输出字符串：No Answer。
 
【输入样例1】
 
3681*752
 
【输出样例1】
 
4
 
【样例1说明】
 
根据输入样例，在棋盘的第一行、第三列位置放置了一皇后，同样在第二行、第六列，第三行、第八列，第四行、第一列，第六行、第七列，第七行、第五列，第八行、第二列也分别放置了一皇后，第五行没有放置皇后。那么为了满足八皇后问题的要求，我们只有在第五行、第四列放置一皇后，所以输出列数为4。
 
【输入样例2】
 
1357246*
 
【输出样例2】
 
No Answer
 
【样例2说明】
 
根据输入样例，在棋盘的第一行、第一列，第二行、第三列，第三行、第五列，第四行、第七列，第五行、第二列，第六行、第四列，第七行、第六列分别放置了一皇后，第八行没有放置皇后。但是根据八皇后问题的要求，前七个皇后放置之后，第八行任何位置都不能放置皇后，否则就会被吃掉。所以输出：No Answer。
 
算法提示：每输入一个皇后的位置，就将与该皇后同行、同列、同斜线的棋盘位置填满，最后如果在未输入的行上有空位置，则该位置就可以放置第八个皇后，否则不能放置。
 
【评分标准】
 
该题要求输出最后一个皇后放置的位置，提交程序文件名为queens.cpp。
 

#include<iostream>
using namespace std;
int main()
{
	int i,j,h,l,k=0,a[8][8]={{0},{0},{0}},n,flag=0;
	char x;
	
	for(i=0;i<8;i++)
	{
		cin>>x;
		if(x=='*') {k=i;continue;}
		if(x!='*')
		{
		n=x-'0';
		l=n-1;h=i;
		for(j=0;j<8;j++)	
			a[i][j]=1;
		for(j=0;j<8;j++)	
			a[j][l]=1;
			
		for(j=l-1;j>=0;j--)
			if(h+1<8)	a[++h][j]=1;
		h=i;
		for(j=l-1;j>=0;j--)
			if(h-1>=0)	a[--h][j]=1;
		h=i;
		for(j=l+1;j<8;j++)
			if(h+1<8)	a[++h][j]=1;
		h=i;
		for(j=l+1;j<8;j++)
			if(h-1>=0)	a[--h][j]=1;
		}
	}
	
	for(j=0;j<8;j++)
		if(a[k][j]==0) {n=j+1;flag=1;break;}
	if(flag==1)	cout<<n<<endl;
	else cout<<"No Answer"<<endl;
	return 0;
}
